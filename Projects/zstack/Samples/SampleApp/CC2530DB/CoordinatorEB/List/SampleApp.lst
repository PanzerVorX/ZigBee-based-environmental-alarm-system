###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         14/Mar/2019  12:52:52 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\ASUS\Desktop\µ¥Æ¬»ú\CC2530\CC2530ÏîÄ¿\»ùÓ #
#                          ÚZigBeeµÄÎÂÆø±¨¾¯ÏµÍ³\ZStack-2.5.1a\Projects\zstac #
#                          k\Samples\SampleApp\Source\SampleApp.c             #
#    Command line       =  -f C:\Users\ASUS\Desktop\µ¥Æ¬»ú\CC2530\CC2530ÏîÄ¿\ #
#                          »ùÓÚZigBeeµÄÎÂÆø±¨¾¯ÏµÍ³\ZStack-2.5.1a\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2 #
#                          530DB\f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func  #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f C:\Users\ASUS\Desktop\µ¥Æ¬»ú\CC2530\CC2530ÏîÄ¿\ #
#                          »ùÓÚZigBeeµÄÎÂÆø±¨¾¯ÏµÍ³\ZStack-2.5.1a\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2 #
#                          530DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0        #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\ASUS\Desktop\µ¥Æ¬» #
#                          ú\CC2530\CC2530ÏîÄ¿\»ùÓÚZigBeeµÄÎÂÆø±¨¾¯ÏµÍ³\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\Source\ #
#                          SampleApp.c -D ZTOOL_P1 -D xMT_TASK -D             #
#                          xMT_SYS_FUNC -D xMT_ZDO_FUNC -D                    #
#                          LCD_SUPPORTED=DEBUG -lC C:\Users\ASUS\Desktop\µ¥Æ¬ #
#                          »ú\CC2530\CC2530ÏîÄ¿\»ùÓÚZigBeeµÄÎÂÆø±¨¾¯ÏµÍ³\ZSta #
#                          ck-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530 #
#                          DB\CoordinatorEB\List\ -lA                         #
#                          C:\Users\ASUS\Desktop\µ¥Æ¬»ú\CC2530\CC2530ÏîÄ¿\»ùÓ #
#                          ÚZigBeeµÄÎÂÆø±¨¾¯ÏµÍ³\ZStack-2.5.1a\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\CoordinatorEB\List\   #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          C:\Users\ASUS\Desktop\µ¥Æ¬»ú\CC2530\CC2530ÏîÄ¿\»ùÓ #
#                          ÚZigBeeµÄÎÂÆø±¨¾¯ÏµÍ³\ZStack-2.5.1a\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj\    #
#                          -e --no_code_motion --debug --core=plain           #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I C:\Users\ASUS\Desktop\µ¥Æ¬ #
#                          »ú\CC2530\CC2530ÏîÄ¿\»ùÓÚZigBeeµÄÎÂÆø±¨¾¯ÏµÍ³\ZSta #
#                          ck-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530 #
#                          DB\ -I C:\Users\ASUS\Desktop\µ¥Æ¬»ú\CC2530\CC2530Ï #
#                          îÄ¿\»ùÓÚZigBeeµÄÎÂÆø±¨¾¯ÏµÍ³\ZStack-2.5.1a\Project #
#                          s\zstack\Samples\SampleApp\CC2530DB\..\Source\ -I  #
#                          C:\Users\ASUS\Desktop\µ¥Æ¬»ú\CC2530\CC2530ÏîÄ¿\»ùÓ #
#                          ÚZigBeeµÄÎÂÆø±¨¾¯ÏµÍ³\ZStack-2.5.1a\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530 #
#                          DB\ -I C:\Users\ASUS\Desktop\µ¥Æ¬»ú\CC2530\CC2530Ï #
#                          îÄ¿\»ùÓÚZigBeeµÄÎÂÆø±¨¾¯ÏµÍ³\ZStack-2.5.1a\Project #
#                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. #
#                          \Components\hal\include\ -I                        #
#                          C:\Users\ASUS\Desktop\µ¥Æ¬»ú\CC2530\CC2530ÏîÄ¿\»ùÓ #
#                          ÚZigBeeµÄÎÂÆø±¨¾¯ÏµÍ³\ZStack-2.5.1a\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\Compon #
#                          ents\hal\target\CC2530EB\ -I                       #
#                          C:\Users\ASUS\Desktop\µ¥Æ¬»ú\CC2530\CC2530ÏîÄ¿\»ùÓ #
#                          ÚZigBeeµÄÎÂÆø±¨¾¯ÏµÍ³\ZStack-2.5.1a\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\Compon #
#                          ents\mac\include\ -I C:\Users\ASUS\Desktop\µ¥Æ¬»ú\ #
#                          CC2530\CC2530ÏîÄ¿\»ùÓÚZigBeeµÄÎÂÆø±¨¾¯ÏµÍ³\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\mac\high_level\ -I       #
#                          C:\Users\ASUS\Desktop\µ¥Æ¬»ú\CC2530\CC2530ÏîÄ¿\»ùÓ #
#                          ÚZigBeeµÄÎÂÆø±¨¾¯ÏµÍ³\ZStack-2.5.1a\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\Compon #
#                          ents\mac\low_level\srf04\ -I                       #
#                          C:\Users\ASUS\Desktop\µ¥Æ¬»ú\CC2530\CC2530ÏîÄ¿\»ùÓ #
#                          ÚZigBeeµÄÎÂÆø±¨¾¯ÏµÍ³\ZStack-2.5.1a\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\Compon #
#                          ents\mac\low_level\srf04\single_chip\ -I           #
#                          C:\Users\ASUS\Desktop\µ¥Æ¬»ú\CC2530\CC2530ÏîÄ¿\»ùÓ #
#                          ÚZigBeeµÄÎÂÆø±¨¾¯ÏµÍ³\ZStack-2.5.1a\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\Compon #
#                          ents\mt\ -I C:\Users\ASUS\Desktop\µ¥Æ¬»ú\CC2530\CC #
#                          2530ÏîÄ¿\»ùÓÚZigBeeµÄÎÂÆø±¨¾¯ÏµÍ³\ZStack-2.5.1a\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\osal\include\ -I                  #
#                          C:\Users\ASUS\Desktop\µ¥Æ¬»ú\CC2530\CC2530ÏîÄ¿\»ùÓ #
#                          ÚZigBeeµÄÎÂÆø±¨¾¯ÏµÍ³\ZStack-2.5.1a\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\Compon #
#                          ents\services\saddr\ -I C:\Users\ASUS\Desktop\µ¥Æ¬ #
#                          »ú\CC2530\CC2530ÏîÄ¿\»ùÓÚZigBeeµÄÎÂÆø±¨¾¯ÏµÍ³\ZSta #
#                          ck-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530 #
#                          DB\..\..\..\..\..\Components\services\sdata\ -I    #
#                          C:\Users\ASUS\Desktop\µ¥Æ¬»ú\CC2530\CC2530ÏîÄ¿\»ùÓ #
#                          ÚZigBeeµÄÎÂÆø±¨¾¯ÏµÍ³\ZStack-2.5.1a\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\Compon #
#                          ents\stack\af\ -I C:\Users\ASUS\Desktop\µ¥Æ¬»ú\CC2 #
#                          530\CC2530ÏîÄ¿\»ùÓÚZigBeeµÄÎÂÆø±¨¾¯ÏµÍ³\ZStack-2.5 #
#                          .1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\Components\stack\nwk\ -I               #
#                          C:\Users\ASUS\Desktop\µ¥Æ¬»ú\CC2530\CC2530ÏîÄ¿\»ùÓ #
#                          ÚZigBeeµÄÎÂÆø±¨¾¯ÏµÍ³\ZStack-2.5.1a\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\Compon #
#                          ents\stack\sapi\ -I C:\Users\ASUS\Desktop\µ¥Æ¬»ú\C #
#                          C2530\CC2530ÏîÄ¿\»ùÓÚZigBeeµÄÎÂÆø±¨¾¯ÏµÍ³\ZStack-2 #
#                          .5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\Components\stack\sec\ -I             #
#                          C:\Users\ASUS\Desktop\µ¥Æ¬»ú\CC2530\CC2530ÏîÄ¿\»ùÓ #
#                          ÚZigBeeµÄÎÂÆø±¨¾¯ÏµÍ³\ZStack-2.5.1a\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\Compon #
#                          ents\stack\sys\ -I C:\Users\ASUS\Desktop\µ¥Æ¬»ú\CC #
#                          2530\CC2530ÏîÄ¿\»ùÓÚZigBeeµÄÎÂÆø±¨¾¯ÏµÍ³\ZStack-2. #
#                          5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\stack\zdo\ -I              #
#                          C:\Users\ASUS\Desktop\µ¥Æ¬»ú\CC2530\CC2530ÏîÄ¿\»ùÓ #
#                          ÚZigBeeµÄÎÂÆø±¨¾¯ÏµÍ³\ZStack-2.5.1a\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\Compon #
#                          ents\zmac\ -I C:\Users\ASUS\Desktop\µ¥Æ¬»ú\CC2530\ #
#                          CC2530ÏîÄ¿\»ùÓÚZigBeeµÄÎÂÆø±¨¾¯ÏµÍ³\ZStack-2.5.1a\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\..\..\Components\zmac\f8w\ -Ohz                  #
#                          --require_prototypes                               #
#    List file          =  C:\Users\ASUS\Desktop\µ¥Æ¬»ú\CC2530\CC2530ÏîÄ¿\»ùÓ #
#                          ÚZigBeeµÄÎÂÆø±¨¾¯ÏµÍ³\ZStack-2.5.1a\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\CoordinatorEB\List\Sa #
#                          mpleApp.lst                                        #
#    Object file        =  C:\Users\ASUS\Desktop\µ¥Æ¬»ú\CC2530\CC2530ÏîÄ¿\»ùÓ #
#                          ÚZigBeeµÄÎÂÆø±¨¾¯ÏµÍ³\ZStack-2.5.1a\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj\Sam #
#                          pleApp.r51                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\ASUS\Desktop\µ¥Æ¬»ú\CC2530\CC2530ÏîÄ¿\»ùÓÚZigBeeµÄÎÂÆø±¨¾¯ÏµÍ³\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x86
   \   unsigned char volatile __sfr U0CSR
   \                     U0CSR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb4
   \   unsigned char volatile __sfr ADCCON1
   \                     ADCCON1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb6
   \   unsigned char volatile __sfr ADCCON3
   \                     ADCCON3:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xba
   \   unsigned char volatile __sfr ADCL
   \                     ADCL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbb
   \   unsigned char volatile __sfr ADCH
   \                     ADCH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc1
   \   unsigned char volatile __sfr U0DBUF
   \                     U0DBUF:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc2
   \   unsigned char volatile __sfr U0BAUD
   \                     U0BAUD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc5
   \   unsigned char volatile __sfr U0GCR
   \                     U0GCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe8
   \   union <unnamed> volatile __sfr _A_IRCON2
   \                     _A_IRCON2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf1
   \   unsigned char volatile __sfr PERCFG
   \                     PERCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          #include "MT_APP.h"
     76          #include "MT.h"
     77          #include "DHT11.h"
     78          
     79          #include "ioCC2530.h"
     80          #include "string.h"
     81          
     82          #define ARRAY_SIZE(arr) (sizeof(arr) / sizeof(arr)[0])
     83          #define DATA_PIN P0_6           //¶¨ÒåP0.6¿ÚÎª´«¸ÐÆ÷µÄÊäÈë¶Ë
     84          
     85          #define FMQ_PIN P0_4
     86          //#define LEDW_PIN P1_1
     87          //#define LEDQ_PIN P1_0
     88          
     89          //typedef unsigned char uchar;
     90          typedef unsigned int uint;
     91          typedef signed short int16;
                                      ^
Warning[Pe301]: typedef name has already been declared (with same type)
     92          typedef unsigned short uint16;
                                        ^
Warning[Pe301]: typedef name has already been declared (with same type)
     93          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     94          char TxBuf[5];
   \                     TxBuf:
   \   000000                DS 5
   \   000005                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     95          uint16 GasData;
   \                     GasData:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     96          
     97          
     98          
     99          /*********************************************************************
    100           * MACROS
    101           */
    102          
    103          /*********************************************************************
    104           * CONSTANTS
    105           */
    106          
    107          /*********************************************************************
    108           * TYPEDEFS
    109           */
    110          
    111          /*********************************************************************
    112           * GLOBAL VARIABLES
    113           */
    114          
    115          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    116          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0300         DW 3
    117          {
    118            SAMPLEAPP_PERIODIC_CLUSTERID,
    119            SAMPLEAPP_FLASH_CLUSTERID,
    120            SAMPLEAPP_P2P_CLUSTERID
    121          };
    122          

   \                                 In  segment XDATA_ROM_C, align 1
    123          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   03           DB 3
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   03           DB 3
   \   00000A   ....         DW SampleApp_ClusterList
    124          {
    125            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    126            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    127            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    128            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    129            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    130            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    131            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    132            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    133            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    134          };
    135          
    136          // This is the Endpoint/Interface description.  It is defined here, but
    137          // filled-in in SampleApp_Init().  Another way to go would be to fill
    138          // in the structure here and make it a "const" (in code space).  The
    139          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    141          
    142          /*********************************************************************
    143           * EXTERNAL VARIABLES
    144           */
    145          
    146          /*********************************************************************
    147           * EXTERNAL FUNCTIONS
    148           */
    149          
    150          /*********************************************************************
    151           * LOCAL VARIABLES
    152           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    154                                    // This variable will be received when
    155                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    156          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    157          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    158          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    159          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          afAddrType_t SampleApp_Periodic_DstAddr; //¹ã²¥
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          afAddrType_t SampleApp_Flash_DstAddr;    //×é²¥
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162          afAddrType_t SampleApp_P2P_DstAddr;      //µã²¥
   \                     SampleApp_P2P_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    163          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    164          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    165          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    166          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    167          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    168          
    169          /*********************************************************************
    170           * LOCAL FUNCTIONS
    171           */
    172          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    173          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    174          void SampleApp_SendPeriodicMessage( void );
    175          void SampleApp_SendFlashMessage( uint16 flashTime );
    176          void SampleApp_Send_P2P_Message(void);
    177          void UartSendString(char *, int);
    178          void InitUart(void);
    179          //void DelayMS(uint msec);
    180          /*********************************************************************
    181           * NETWORK LAYER CALLBACKS
    182           */
    183          
    184          /*********************************************************************
    185           * PUBLIC FUNCTIONS
    186           */
    187          
    188          
    189          
    190          
    191          
    192          uint16 ReadGasData( void );
    193          /****************************************************************************
    194          * Ãû ³Æ: InitUart()
    195          * ¹¦ ÄÜ: ´®¿Ú³õÊ¼»¯º¯Êý
    196          * Èë¿Ú²ÎÊý: ÎÞ
    197          * ³ö¿Ú²ÎÊý: ÎÞ
    198          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    199          void InitUart(void)
   \                     InitUart:
    200          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    201          PERCFG = 0x00; //ÍâÉè¿ØÖÆ¼Ä´æÆ÷ USART 0 µÄ IO Î»ÖÃ:0 Îª P0 ¿ÚÎ»ÖÃ 1
   \   000000   75F100       MOV     0xf1,#0x0
    202          P0SEL = 0x0c; //P0_2,P0_3 ÓÃ×÷´®¿Ú£¨ÍâÉè¹¦ÄÜ£©
   \   000003   75F30C       MOV     0xf3,#0xc
    203          P2DIR &= ~0XC0; //P0 ÓÅÏÈ×÷Îª UART0
   \   000006   53FF3F       ANL     0xff,#0x3f
    204          U0CSR |= 0x80; //ÉèÖÃÎª UART ·½Ê½
   \   000009   438680       ORL     0x86,#0x80
    205          U0GCR |= 11;
   \   00000C   43C50B       ORL     0xc5,#0xb
    206          U0BAUD |= 216; //²¨ÌØÂÊÉèÎª 115200
   \   00000F   43C2D8       ORL     0xc2,#0xd8
    207          UTX0IF = 0; //UART0 TX ÖÐ¶Ï±êÖ¾³õÊ¼ÖÃÎ» 0
   \   000012   C2E9         CLR     0xe8.1
    208          }
   \   000014   02....       LJMP    ?BRET
   \   000017                REQUIRE PERCFG
   \   000017                REQUIRE P0SEL
   \   000017                REQUIRE P2DIR
   \   000017                REQUIRE U0CSR
   \   000017                REQUIRE U0GCR
   \   000017                REQUIRE U0BAUD
   \   000017                REQUIRE _A_IRCON2
    209          
    210          
    211          /****************************************************************************
    212          * Ãû ³Æ: UartSendString()
    213          * ¹¦ ÄÜ: ´®¿Ú·¢ËÍº¯Êý
    214          * Èë¿Ú²ÎÊý: Data:·¢ËÍ»º³åÇø len:·¢ËÍ³¤¶È
    215          * ³ö¿Ú²ÎÊý: ÎÞ
    216          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    217          void UartSendString(char *Data, int len)
   \                     UartSendString:
    218          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    219          uint i;
    220          for(i=0; i<len; i++)
   \   000005   7800         MOV     R0,#0x0
   \   000007   7900         MOV     R1,#0x0
   \   000009   801A         SJMP    ??UartSendString_0
    221          {
    222          U0DBUF = *Data++;
   \                     ??UartSendString_1:
   \   00000B   8A82         MOV     DPL,R2
   \   00000D   8B83         MOV     DPH,R3
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F5C1         MOV     0xc1,A
   \   000012   A3           INC     DPTR
   \   000013   AA82         MOV     R2,DPL
   \   000015   AB83         MOV     R3,DPH
    223          while(UTX0IF == 0);
   \                     ??UartSendString_2:
   \   000017   A2E9         MOV     C,0xe8.1
   \   000019   50FC         JNC     ??UartSendString_2
    224          UTX0IF = 0;
   \   00001B   C2E9         CLR     0xe8.1
    225          }
   \   00001D   E8           MOV     A,R0
   \   00001E   2401         ADD     A,#0x1
   \   000020   08           INC     R0
   \   000021   E9           MOV     A,R1
   \   000022   3400         ADDC    A,#0x0
   \   000024   F9           MOV     R1,A
   \                     ??UartSendString_0:
   \   000025   C3           CLR     C
   \   000026   E8           MOV     A,R0
   \   000027   9C           SUBB    A,R4
   \   000028   E9           MOV     A,R1
   \   000029   9D           SUBB    A,R5
   \   00002A   40DF         JC      ??UartSendString_1
    226          }
   \   00002C   7F01         MOV     R7,#0x1
   \   00002E   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000031                REQUIRE U0DBUF
   \   000031                REQUIRE _A_IRCON2
    227          
    228          /****************************************************************************
    229          * Ãû ³Æ: DelayMS()
    230          * ¹¦ ÄÜ: ÒÔºÁÃëÎªµ¥Î»ÑÓÊ± 16M Ê±Ô¼Îª 535,32M Ê±Òªµ÷Õû,ÏµÍ³Ê±ÖÓ²»ÐÞ¸ÄÄ¬ÈÏÎª
    231          16M
    232          * Èë¿Ú²ÎÊý: msec ÑÓÊ±²ÎÊý£¬ÖµÔ½´óÑÓÊ±Ô½¾Ã
    233          * ³ö¿Ú²ÎÊý: ÎÞ
    234          ****************************************************************************/
    235          /*
    236          void DelayMS(uint msec)
    237          {
    238          uint i,j;
    239          for (i=0; i<msec; i++)
    240          for (j=0; j<1070; j++);
    241          }
    242          */
    243          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    244          uint16 ReadGasData( void )
   \                     ReadGasData:
    245          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    246          uint16 reading = 0;
    247          ADCCFG |= 0x40; /* Enable channel */
   \   000000   43F240       ORL     0xf2,#0x40
    248          /* writing to this register starts the extra conversion */
    249          ADCCON3 = 0x86;// 0x87;
   \   000003   75B686       MOV     0xb6,#-0x7a
    250          /* Wait for the conversion to be done */
    251          while (!(ADCCON1 & 0x80));
   \                     ??ReadGasData_0:
   \   000006   E5B4         MOV     A,0xb4
   \   000008   A2E7         MOV     C,0xE0 /* A   */.7
   \   00000A   50FA         JNC     ??ReadGasData_0
    252          /* Disable channel after done conversion */
    253          ADCCFG &= (0x80 ^ 0xFF); //°´Î»Òì»ò¡£Èç 1010^1111=0101£¨¶þ½øÖÆ£©
   \   00000C   53F27F       ANL     0xf2,#0x7f
    254          /* Read the result */
    255          reading = ADCL;
   \   00000F   E5BA         MOV     A,0xba
    256          reading |= (int16) (ADCH << 8);
    257          reading >>= 8;
    258          return (reading);
   \   000011   E5BB         MOV     A,0xbb
   \   000013   FA           MOV     R2,A
   \   000014   E4           CLR     A
   \   000015   FB           MOV     R3,A
   \   000016   02....       LJMP    ?BRET
   \   000019                REQUIRE ADCCFG
   \   000019                REQUIRE ADCCON3
   \   000019                REQUIRE ADCCON1
   \   000019                REQUIRE ADCL
   \   000019                REQUIRE ADCH
    259          }
    260          
    261          
    262          
    263          
    264          
    265          
    266          
    267          
    268          
    269          
    270          
    271          
    272          /*********************************************************************
    273           * @fn      SampleApp_Init
    274           *
    275           * @brief   Initialization function for the Generic App Task.
    276           *          This is called during initialization and should contain
    277           *          any application specific initialization (ie. hardware
    278           *          initialization/setup, table initialization, power up
    279           *          notificaiton ... ).
    280           *
    281           * @param   task_id - the ID assigned by OSAL.  This ID should be
    282           *                    used to send messages and set timers.
    283           *
    284           * @return  none
    285           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    286          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    287          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    288            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    289            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    290            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    291            
    292            MT_UartInit();                  //´®¿Ú³õÊ¼»¯
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    293            MT_UartRegisterTaskID(task_id); //×¢²á´®¿ÚÈÎÎñ
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    294            
    295            
    296            
    297              P1DIR|=0x02;
   \   00001E   43FE02       ORL     0xfe,#0x2
    298              P1SEL&=~0x02;
   \   000021   53F4FD       ANL     0xf4,#0xfd
    299              P1_1=0;
   \   000024   C291         CLR     0x90.1
    300              
    301              P1DIR|=0x01;
   \   000026   43FE01       ORL     0xfe,#0x1
    302              P1SEL&=~0x01;
   \   000029   53F4FE       ANL     0xf4,#0xfe
    303              P1_0=0;
   \   00002C   C290         CLR     0x90.0
    304            
    305            
    306            
    307            P0SEL &= 0x7f;                  //P0_7ÅäÖÃ³ÉÍ¨ÓÃio
   \   00002E   53F37F       ANL     0xf3,#0x7f
    308            P0SEL &= ~0x40;                 //ÉèÖÃP0.6ÎªÆÕÍ¨IO¿Ú
   \   000031   53F3BF       ANL     0xf3,#0xbf
    309            P0DIR &= ~0x40;                 //P0.6¶¨ÒåÎªÊäÈë¿Ú
   \   000034   53FDBF       ANL     0xfd,#0xbf
    310            
    311            
    312            //P0DIR|=0x10;
    313            //P0SEL&=~0x10;
    314            
    315            CLKCONCMD &= ~0x40; //ÉèÖÃÏµÍ³Ê±ÖÓÔ´Îª 32MHZ ¾§Õñ
   \   000037   53C6BF       ANL     0xc6,#0xbf
    316             while(CLKCONSTA & 0x40); //µÈ´ý¾§ÕñÎÈ¶¨Îª 32M
   \                     ??SampleApp_Init_0:
   \   00003A   E59E         MOV     A,0x9e
   \   00003C   A2E6         MOV     C,0xE0 /* A   */.6
   \   00003E   40FA         JC      ??SampleApp_Init_0
    317            CLKCONCMD &= ~0x47; //ÉèÖÃÏµÍ³Ö÷Ê±ÖÓÆµÂÊÎª 32MHZ
   \   000040   53C6B8       ANL     0xc6,#0xb8
    318            
    319            InitUart();
   \   000043                ; Setup parameters for call to function InitUart
   \   000043   12....       LCALL   ??InitUart?relay
    320            
    321            
    322            
    323            // Device hardware initialization can be added here or in main() (Zmain.c).
    324            // If the hardware is application specific - add it here.
    325            // If the hardware is other parts of the device add it in main().
    326          
    327           #if defined ( BUILD_ALL_DEVICES )
    328            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    329            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    330            // together - if they are - we will start up a coordinator. Otherwise,
    331            // the device will start as a router.
    332            if ( readCoordinatorJumper() )
    333              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    334            else
    335              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    336          #endif // BUILD_ALL_DEVICES
    337          
    338          #if defined ( HOLD_AUTO_START )
    339            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    340            //  from starting the device and wait for the application to
    341            //  start the device.
    342            ZDOInitDevice(0);
    343          #endif
    344          
    345            // Setup for the periodic message's destination address
    346            // Broadcast to everyone
    347            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000046   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000049   740F         MOV     A,#0xf
   \   00004B   F0           MOVX    @DPTR,A
    348            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00004C   A3           INC     DPTR
   \   00004D   7414         MOV     A,#0x14
   \   00004F   F0           MOVX    @DPTR,A
    349            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000050   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000053   74FF         MOV     A,#-0x1
   \   000055   F0           MOVX    @DPTR,A
   \   000056   A3           INC     DPTR
   \   000057   F0           MOVX    @DPTR,A
    350          
    351            // Setup for the flash command's destination address - Group 1
    352            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000058   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   00005B   7401         MOV     A,#0x1
   \   00005D   F0           MOVX    @DPTR,A
    353            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00005E   A3           INC     DPTR
   \   00005F   7414         MOV     A,#0x14
   \   000061   F0           MOVX    @DPTR,A
    354            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   000062   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000065   7401         MOV     A,#0x1
   \   000067   F0           MOVX    @DPTR,A
   \   000068   A3           INC     DPTR
   \   000069   E4           CLR     A
   \   00006A   F0           MOVX    @DPTR,A
    355            
    356            SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µã²¥ 
   \   00006B   90....       MOV     DPTR,#SampleApp_P2P_DstAddr + 8
   \   00006E   7402         MOV     A,#0x2
   \   000070   F0           MOVX    @DPTR,A
    357            SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
   \   000071   A3           INC     DPTR
   \   000072   7414         MOV     A,#0x14
   \   000074   F0           MOVX    @DPTR,A
    358            SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            //·¢¸øÐ­µ÷Æ÷
   \   000075   90....       MOV     DPTR,#SampleApp_P2P_DstAddr
   \   000078   E4           CLR     A
   \   000079   F0           MOVX    @DPTR,A
   \   00007A   A3           INC     DPTR
   \   00007B   F0           MOVX    @DPTR,A
    359          
    360            // Fill out the endpoint description.
    361            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   00007C   90....       MOV     DPTR,#SampleApp_epDesc
   \   00007F   7414         MOV     A,#0x14
   \   000081   F0           MOVX    @DPTR,A
    362            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000082   A3           INC     DPTR
   \   000083   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000085   F0           MOVX    @DPTR,A
   \   000086   A3           INC     DPTR
   \   000087   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000089   F0           MOVX    @DPTR,A
    363            SampleApp_epDesc.simpleDesc
    364                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   00008A   A3           INC     DPTR
   \   00008B   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   A3           INC     DPTR
   \   00008F   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000091   F0           MOVX    @DPTR,A
    365            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000092   A3           INC     DPTR
   \   000093   E4           CLR     A
   \   000094   F0           MOVX    @DPTR,A
    366          
    367            // Register the endpoint description with the AF
    368            afRegister( &SampleApp_epDesc );
   \   000095                ; Setup parameters for call to function afRegister
   \   000095   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000097   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000099   12....       LCALL   ??afRegister?relay
    369          
    370            // Register for all key events - This app will handle all key events
    371            RegisterForKeys( SampleApp_TaskID );
   \   00009C                ; Setup parameters for call to function RegisterForKeys
   \   00009C   90....       MOV     DPTR,#SampleApp_TaskID
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   F9           MOV     R1,A
   \   0000A1   12....       LCALL   ??RegisterForKeys?relay
    372          
    373            // By default, all devices start out in Group 1
    374            SampleApp_Group.ID = 0x0001;
   \   0000A4   90....       MOV     DPTR,#SampleApp_Group
   \   0000A7   7401         MOV     A,#0x1
   \   0000A9   F0           MOVX    @DPTR,A
   \   0000AA   A3           INC     DPTR
   \   0000AB   E4           CLR     A
   \   0000AC   F0           MOVX    @DPTR,A
    375            osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
   \   0000AD                ; Setup parameters for call to function osal_memcpy
   \   0000AD   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   0000B0   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   0000B3   F5..         MOV     ?V0 + 2,A
   \   0000B5   78..         MOV     R0,#?V0 + 0
   \   0000B7   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000BA   7C07         MOV     R4,#0x7
   \   0000BC   7D00         MOV     R5,#0x0
   \   0000BE   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000C0   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000C2   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000C5   12....       LCALL   ?DEALLOC_XSTACK8
    376            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000C8                ; Setup parameters for call to function aps_AddGroup
   \   0000C8   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000CA   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000CC   7914         MOV     R1,#0x14
   \   0000CE   12....       LCALL   ??aps_AddGroup?relay
    377          
    378          #if defined ( LCD_SUPPORTED )
    379            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000D1                ; Setup parameters for call to function HalLcdWriteString
   \   0000D1   7901         MOV     R1,#0x1
   \   0000D3   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000D5   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000D7   12....       LCALL   ??HalLcdWriteString?relay
    380          #endif
    381          }
   \   0000DA                REQUIRE ?Subroutine0
   \   0000DA                REQUIRE P1DIR
   \   0000DA                REQUIRE P1SEL
   \   0000DA                REQUIRE _A_P1
   \   0000DA                REQUIRE P0SEL
   \   0000DA                REQUIRE P0DIR
   \   0000DA                REQUIRE CLKCONCMD
   \   0000DA                REQUIRE CLKCONSTA
   \   0000DA                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   12....       LCALL   ??osal_memcpy?relay
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET
    382          
    383          /*********************************************************************
    384           * @fn      SampleApp_ProcessEvent
    385           *
    386           * @brief   Generic Application Task event processor.  This function
    387           *          is called to process all events for the task.  Events
    388           *          include timers, messages and any other user defined events.
    389           *
    390           * @param   task_id  - The OSAL assigned task ID.
    391           * @param   events - events to process.  This is a bit map and can
    392           *                   contain more than one event.
    393           *
    394           * @return  none
    395           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    396          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    397          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    398            afIncomingMSGPacket_t *MSGpkt;
    399            (void)task_id;  // Intentionally unreferenced parameter
    400          
    401            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   6074         JZ      ??SampleApp_ProcessEvent_0
    402            {
    403              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8026         SJMP    ??SampleApp_ProcessEvent_1
    404              while ( MSGpkt )
    405              {
    406                switch ( MSGpkt->hdr.event )
    407                {
    408                  // Received when a key is pressed
    409                  case KEY_CHANGE:
    410                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    411                    break;
    412          
    413                  // Received when a messages is received (OTA) for this endpoint
    414                  case AF_INCOMING_MSG_CMD:
    415                    SampleApp_MessageMSGCB( MSGpkt );
    416                    break;
    417          
    418                  // Received whenever the device changes state in the network
    419                  case ZDO_STATE_CHANGE:
    420                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    421                    if ( //(SampleApp_NwkState == DEV_ZB_COORD) ||
    422                           (SampleApp_NwkState == DEV_ROUTER)
    423                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7010         JNZ     ??SampleApp_ProcessEvent_4
    424                    {
    425                      // Start sending the periodic message in a regular interval.
    426                      osal_start_timerEx( SampleApp_TaskID,
    427                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    428                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   7CD0         MOV     R4,#-0x30
   \   000020   7D07         MOV     R5,#0x7
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#SampleApp_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_start_timerEx?relay
    429                    }
    430                    else
    431                    {
    432                      // Device is no longer in the network
    433                    }
    434                    break;
    435          
    436                  default:
    437                    break;
    438                }
    439          
    440                // Release the memory
    441                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   00002E                ; Setup parameters for call to function osal_msg_deallocate
   \   00002E   AA..         MOV     R2,?V0 + 0
   \   000030   AB..         MOV     R3,?V0 + 1
   \   000032   12....       LCALL   ??osal_msg_deallocate?relay
    442          
    443                // Next - if one is available
    444                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000035                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000035   90....       MOV     DPTR,#SampleApp_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??osal_msg_receive?relay
   \   00003D   8A..         MOV     ?V0 + 0,R2
   \   00003F   8B..         MOV     ?V0 + 1,R3
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   45..         ORL     A,?V0 + 1
   \   000045   6032         JZ      ??SampleApp_ProcessEvent_5
   \   000047   85..82       MOV     DPL,?V0 + 0
   \   00004A   85..83       MOV     DPH,?V0 + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   24E6         ADD     A,#-0x1a
   \   000050   601E         JZ      ??SampleApp_ProcessEvent_6
   \   000052   245A         ADD     A,#0x5a
   \   000054   6006         JZ      ??SampleApp_ProcessEvent_7
   \   000056   24EF         ADD     A,#-0x11
   \   000058   60B5         JZ      ??SampleApp_ProcessEvent_2
   \   00005A   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   00005C                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FA           MOV     R2,A
   \   000061   85..82       MOV     DPL,?V0 + 0
   \   000064   85..83       MOV     DPH,?V0 + 1
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00006E   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000070                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000070   AA..         MOV     R2,?V0 + 0
   \   000072   AB..         MOV     R3,?V0 + 1
   \   000074   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000077   80B5         SJMP    ??SampleApp_ProcessEvent_4
    445              }
    446          
    447              // return unprocessed events
    448              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000079   EE           MOV     A,R6
   \   00007A   FA           MOV     R2,A
   \   00007B   EF           MOV     A,R7
   \   00007C   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_8:
   \   00007E   FB           MOV     R3,A
   \   00007F   802A         SJMP    ??SampleApp_ProcessEvent_9
    449            }
    450          
    451            // Send a message out - This event is generated by a timer
    452            //  (setup in SampleApp_Init()).
    453            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000081   EE           MOV     A,R6
   \   000082   A2E0         MOV     C,0xE0 /* A   */.0
   \   000084   5021         JNC     ??SampleApp_ProcessEvent_10
    454            {
    455              // Send the periodic message
    456              //SampleApp_SendPeriodicMessage();
    457              SampleApp_Send_P2P_Message();
   \   000086                ; Setup parameters for call to function SampleApp_Send_P2P_Message
   \   000086   12....       LCALL   ??SampleApp_Send_P2P_Message?relay
    458          
    459              // Setup to send message again in normal period (+ a little jitter)
    460              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    461                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000089                ; Setup parameters for call to function osal_rand
   \   000089   12....       LCALL   ??osal_rand?relay
   \   00008C                ; Setup parameters for call to function osal_start_timerEx
   \   00008C   EA           MOV     A,R2
   \   00008D   24D0         ADD     A,#-0x30
   \   00008F   FC           MOV     R4,A
   \   000090   E4           CLR     A
   \   000091   3407         ADDC    A,#0x7
   \   000093   FD           MOV     R5,A
   \   000094   7A01         MOV     R2,#0x1
   \   000096   7B00         MOV     R3,#0x0
   \   000098   90....       MOV     DPTR,#SampleApp_TaskID
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   ??osal_start_timerEx?relay
    462          
    463              // return unprocessed events
    464              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000A0   EE           MOV     A,R6
   \   0000A1   6401         XRL     A,#0x1
   \   0000A3   FA           MOV     R2,A
   \   0000A4   EF           MOV     A,R7
   \   0000A5   80D7         SJMP    ??SampleApp_ProcessEvent_8
    465            }
    466          
    467            // Discard unknown events
    468            return 0;
   \                     ??SampleApp_ProcessEvent_10:
   \   0000A7   7A00         MOV     R2,#0x0
   \   0000A9   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   0000AB   7F04         MOV     R7,#0x4
   \   0000AD   02....       LJMP    ?BANKED_LEAVE_XDATA
    469          }
    470          
    471          /*********************************************************************
    472           * Event Generation Functions
    473           */
    474          /*********************************************************************
    475           * @fn      SampleApp_HandleKeys
    476           *
    477           * @brief   Handles all key events for this device.
    478           *
    479           * @param   shift - true if in shift/alt.
    480           * @param   keys - bit field for key events. Valid entries:
    481           *                 HAL_KEY_SW_2
    482           *                 HAL_KEY_SW_1
    483           *
    484           * @return  none
    485           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    486          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    487          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    488            (void)shift;  // Intentionally unreferenced parameter
    489            
    490            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   5007         JNC     ??SampleApp_HandleKeys_0
    491            {
    492              /* This key sends the Flash Command is sent to Group 1.
    493               * This device will not receive the Flash Command from this
    494               * device (even if it belongs to group 1).
    495               */
    496              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV     R2,#-0x18
   \   00000D   7B03         MOV     R3,#0x3
   \   00000F   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    497            }
    498          
    499            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV     A,R6
   \   000013   A2E1         MOV     C,0xE0 /* A   */.1
   \   000015   5024         JNC     ??SampleApp_HandleKeys_1
    500            {
    501              /* The Flashr Command is sent to Group 1.
    502               * This key toggles this device in and out of group 1.
    503               * If this device doesn't belong to group 1, this application
    504               * will not receive the Flash command sent to group 1.
    505               */
    506              aps_Group_t *grp;
    507              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    508              if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7914         MOV     R1,#0x14
   \   00001D   12....       LCALL   ??aps_FindGroup?relay
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   EA           MOV     A,R2
   \   000023   45..         ORL     A,?V0 + 1
   \   000025   600B         JZ      ??SampleApp_HandleKeys_2
    509              {
    510                // Remove from the group
    511                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000027                ; Setup parameters for call to function aps_RemoveGroup
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   7914         MOV     R1,#0x14
   \   00002D   12....       LCALL   ??aps_RemoveGroup?relay
   \   000030   8009         SJMP    ??SampleApp_HandleKeys_1
    512              }
    513              else
    514              {
    515                // Add to the flash group
    516                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000032                ; Setup parameters for call to function aps_AddGroup
   \   000032   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000034   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000036   7914         MOV     R1,#0x14
   \   000038   12....       LCALL   ??aps_AddGroup?relay
    517              }
    518            }
    519          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003B   80..         SJMP    ??Subroutine10_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine10_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    520          
    521          /*********************************************************************
    522           * LOCAL FUNCTIONS
    523           */
    524          
    525          /*********************************************************************
    526           * @fn      SampleApp_MessageMSGCB
    527           *
    528           * @brief   Data message processor callback.  This function processes
    529           *          any incoming data - probably from other devices.  So, based
    530           *          on cluster ID, perform the intended action.
    531           *
    532           * @param   none
    533           *
    534           * @return  none
    535           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    536          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    537          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    538            uint16 flashTime;
    539            byte * test;
    540            int wdVar,qtVar;
    541          
    542            switch ( pkt->clusterId )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F5..         MOV     ?V0 + 0,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F5..         MOV     ?V0 + 1,A
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   00001D   0200         DW        2
   \   00001F   01           DB        1
   \   000020   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000022   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000024   ....         DW        ??SampleApp_MessageMSGCB_2
    543            {
    544              case SAMPLEAPP_P2P_CLUSTERID:
    545                test=pkt->cmd.Data;
   \                     ??SampleApp_MessageMSGCB_2:
   \   000026   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000029   F5..         MOV     ?V0 + 0,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V0 + 1,A
    546                if(pkt->cmd.DataLength==6)
   \   00002F   EE           MOV     A,R6
   \   000030   2420         ADD     A,#0x20
   \   000032   12....       LCALL   ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000035   6406         XRL     A,#0x6
   \   000037   7002         JNZ     ??SampleApp_MessageMSGCB_3
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \                     ??SampleApp_MessageMSGCB_3:
   \   00003B   7042         JNZ     ??SampleApp_MessageMSGCB_4
    547                {
    548                  HalUARTWrite(0, "T&H:", 4);//ÌáÊ¾½ÓÊÕµ½Êý¾Ý
   \   00003D                ; Setup parameters for call to function HalUARTWrite
   \   00003D   7C04         MOV     R4,#0x4
   \   00003F   7D00         MOV     R5,#0x0
   \   000041   7A..         MOV     R2,#`?<Constant "T&H:">` & 0xff
   \   000043   7B..         MOV     R3,#(`?<Constant "T&H:">` >> 8) & 0xff
   \   000045   12....       LCALL   ?Subroutine2 & 0xFFFF
    549                  HalUARTWrite(0, pkt->cmd.Data, pkt->cmd.DataLength);//Êä³ö½ÓÊÕµ½µÄÊý¾Ý
    550                  HalUARTWrite(0, "\n", 1);// »Ø³µ»»ÐÐ
    551                  wdVar=(test[0]-48)*10+(test[1]-48);
    552                  //UartSendString(test,2);
    553                  //osal_memcpy(test,pkt->cmd.Data,3); 
    554                  //UartSendString(test,3);
    555                  if(wdVar>30)
   \                     ??CrossCallReturnLabel_0:
   \   000048   75F00A       MOV     B,#0xa
   \   00004B   A4           MUL     AB
   \   00004C   F8           MOV     R0,A
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   FA           MOV     R2,A
   \   000050   E8           MOV     A,R0
   \   000051   2A           ADD     A,R2
   \   000052   F8           MOV     R0,A
   \   000053   E5F0         MOV     A,B
   \   000055   3400         ADDC    A,#0x0
   \   000057   F9           MOV     R1,A
   \   000058   E8           MOV     A,R0
   \   000059   24F0         ADD     A,#-0x10
   \   00005B   F8           MOV     R0,A
   \   00005C   E9           MOV     A,R1
   \   00005D   34FD         ADDC    A,#-0x3
   \   00005F   F9           MOV     R1,A
   \   000060   C3           CLR     C
   \   000061   E8           MOV     A,R0
   \   000062   941F         SUBB    A,#0x1f
   \   000064   E9           MOV     A,R1
   \   000065   9400         SUBB    A,#0x0
   \   000067   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000069   65D0         XRL     A,PSW
   \   00006B   33           RLC     A
   \   00006C   400F         JC      ??SampleApp_MessageMSGCB_5
    556                  {
    557                    P1_1=1;
   \   00006E   D291         SETB    0x90.1
    558                    //LEDW_PIN=1;
    559                    //FMQ_PIN=1;
    560                    HalUARTWrite(0, "Abnormal temperature",21);
   \   000070                ; Setup parameters for call to function HalUARTWrite
   \   000070   7C15         MOV     R4,#0x15
   \   000072   7D00         MOV     R5,#0x0
   \   000074   7A..         MOV     R2,#`?<Constant "Abnormal temperature">` & 0xff
   \   000076   7B..         MOV     R3,#(`?<Constant "Abnormal temperature">` >> 8) & 0xff
   \   000078   12....       LCALL   ?Subroutine5 & 0xFFFF
    561                    HalUARTWrite(0, "\n", 1); // »Ø³µ»»ÐÐ
    562                  }
   \                     ??CrossCallReturnLabel_4:
   \   00007B   8002         SJMP    ??SampleApp_MessageMSGCB_4
    563                  else
    564                  {
    565                    P1_1=0;
   \                     ??SampleApp_MessageMSGCB_5:
   \   00007D   C291         CLR     0x90.1
    566                    //LEDW_PIN=0;
    567                    //FMQ_PIN=0;
    568                  }
    569                }
    570                if(pkt->cmd.DataLength==5)
   \                     ??SampleApp_MessageMSGCB_4:
   \   00007F   EE           MOV     A,R6
   \   000080   2420         ADD     A,#0x20
   \   000082   12....       LCALL   ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000085   6405         XRL     A,#0x5
   \   000087   7002         JNZ     ??SampleApp_MessageMSGCB_6
   \   000089   A3           INC     DPTR
   \   00008A   E0           MOVX    A,@DPTR
   \                     ??SampleApp_MessageMSGCB_6:
   \   00008B   6003         JZ      $+5
   \   00008D   02....       LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
    571                {
    572                  HalUARTWrite(0, "MQ2:", 4); //ÌáÊ¾½ÓÊÕµ½Êý¾Ý
   \   000090                ; Setup parameters for call to function HalUARTWrite
   \   000090   7C04         MOV     R4,#0x4
   \   000092   7D00         MOV     R5,#0x0
   \   000094   7A..         MOV     R2,#`?<Constant "MQ2:">` & 0xff
   \   000096   7B..         MOV     R3,#(`?<Constant "MQ2:">` >> 8) & 0xff
   \   000098   12....       LCALL   ?Subroutine2 & 0xFFFF
    573                  HalUARTWrite(0, pkt->cmd.Data, pkt->cmd.DataLength); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
    574                  HalUARTWrite(0, "\n", 1); // »Ø³µ»»ÐÐ
    575                  qtVar=(test[0]-48)*100+(test[1]-48)*10+(test[2]-48);
    576                   //UartSendString(test,3);
    577                  //osal_memcpy(test,pkt->cmd.Data,3); 
    578                  //UartSendString(test,3);
    579                  if(qtVar>40)
   \                     ??CrossCallReturnLabel_1:
   \   00009B   75F064       MOV     B,#0x64
   \   00009E   A4           MUL     AB
   \   00009F   F8           MOV     R0,A
   \   0000A0   A9F0         MOV     R1,B
   \   0000A2   A3           INC     DPTR
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   75F00A       MOV     B,#0xa
   \   0000A7   A4           MUL     AB
   \   0000A8   FA           MOV     R2,A
   \   0000A9   ABF0         MOV     R3,B
   \   0000AB   E8           MOV     A,R0
   \   0000AC   2A           ADD     A,R2
   \   0000AD   F8           MOV     R0,A
   \   0000AE   E9           MOV     A,R1
   \   0000AF   3B           ADDC    A,R3
   \   0000B0   F9           MOV     R1,A
   \   0000B1   85..82       MOV     DPL,?V0 + 0
   \   0000B4   85..83       MOV     DPH,?V0 + 1
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   FA           MOV     R2,A
   \   0000BB   E8           MOV     A,R0
   \   0000BC   2A           ADD     A,R2
   \   0000BD   F8           MOV     R0,A
   \   0000BE   E9           MOV     A,R1
   \   0000BF   3400         ADDC    A,#0x0
   \   0000C1   F9           MOV     R1,A
   \   0000C2   E8           MOV     A,R0
   \   0000C3   2430         ADD     A,#0x30
   \   0000C5   F8           MOV     R0,A
   \   0000C6   E9           MOV     A,R1
   \   0000C7   34EB         ADDC    A,#-0x15
   \   0000C9   F9           MOV     R1,A
   \   0000CA   C3           CLR     C
   \   0000CB   E8           MOV     A,R0
   \   0000CC   9429         SUBB    A,#0x29
   \   0000CE   E9           MOV     A,R1
   \   0000CF   9400         SUBB    A,#0x0
   \   0000D1   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0000D3   65D0         XRL     A,PSW
   \   0000D5   33           RLC     A
   \   0000D6   400F         JC      ??SampleApp_MessageMSGCB_7
    580                  {
    581                    P1_0=1;
   \   0000D8   D290         SETB    0x90.0
    582                    //LEDQ_PIN=1;
    583                    //FMQ_PIN=1;
    584                    HalUARTWrite(0, "Gas anomaly",12);
   \   0000DA                ; Setup parameters for call to function HalUARTWrite
   \   0000DA   7C0C         MOV     R4,#0xc
   \   0000DC   7D00         MOV     R5,#0x0
   \   0000DE   7A..         MOV     R2,#`?<Constant "Gas anomaly">` & 0xff
   \   0000E0   7B..         MOV     R3,#(`?<Constant "Gas anomaly">` >> 8) & 0xff
   \   0000E2   12....       LCALL   ?Subroutine5 & 0xFFFF
    585                    HalUARTWrite(0, "\n", 1); // »Ø³µ»»ÐÐ
    586                  }
   \                     ??CrossCallReturnLabel_5:
   \   0000E5   8037         SJMP    ??SampleApp_MessageMSGCB_0
    587                  else
    588                  {
    589                    P1_0=0;
   \                     ??SampleApp_MessageMSGCB_7:
   \   0000E7   C290         CLR     0x90.0
   \   0000E9   8033         SJMP    ??SampleApp_MessageMSGCB_0
    590                    //LEDQ_PIN=0;
    591                    //FMQ_PIN=0;
    592                  }
    593                 
    594                }
   \                     ??SampleApp_MessageMSGCB_1:
   \   0000EB   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0000EE   F8           MOV     R0,A
   \   0000EF   A3           INC     DPTR
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   F9           MOV     R1,A
   \   0000F2                ; Setup parameters for call to function HalLedBlink
   \   0000F2   8882         MOV     DPL,R0
   \   0000F4   8983         MOV     DPH,R1
   \   0000F6   A3           INC     DPTR
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   FA           MOV     R2,A
   \   0000F9   8882         MOV     DPL,R0
   \   0000FB   8983         MOV     DPH,R1
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   F9           MOV     R1,A
   \   000101   EA           MOV     A,R2
   \   000102   2400         ADD     A,#0x0
   \   000104   F5..         MOV     ?V0 + 0,A
   \   000106   E4           CLR     A
   \   000107   39           ADDC    A,R1
   \   000108   F5..         MOV     ?V0 + 1,A
   \   00010A   7402         MOV     A,#0x2
   \   00010C   78..         MOV     R0,#?V0 + 0
   \   00010E   12....       LCALL   ?US_SHR
   \   000111   AC..         MOV     R4,?V0 + 0
   \   000113   AD..         MOV     R5,?V0 + 1
   \   000115   7B32         MOV     R3,#0x32
   \   000117   7A04         MOV     R2,#0x4
   \   000119   7908         MOV     R1,#0x8
    595                break;    
    596              case SAMPLEAPP_PERIODIC_CLUSTERID:
    597                break;
    598          
    599              case SAMPLEAPP_FLASH_CLUSTERID:
    600                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    601                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \   00011B   12....       LCALL   ??HalLedBlink?relay
    602                break;
    603            }
    604          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   00011E   02....       LJMP    ??Subroutine10_0 & 0xFFFF
   \   000121                REQUIRE _A_P1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   EE           MOV     A,R6
   \   000001   2422         ADD     A,#0x22
   \   000003                REQUIRE ??Subroutine11_0
   \   000003                ; // Fall through to label ??Subroutine11_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine11_0:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003   3400         ADDC    A,#0x0
   \   000005   F583         MOV     DPH,A
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7900         MOV     R1,#0x0
   \   000002   12....       LCALL   ??HalUARTWrite?relay
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005   EE           MOV     A,R6
   \   000006   2420         ADD     A,#0x20
   \   000008   F582         MOV     DPL,A
   \   00000A   EF           MOV     A,R7
   \   00000B   3400         ADDC    A,#0x0
   \   00000D   F583         MOV     DPH,A
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FC           MOV     R4,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FD           MOV     R5,A
   \   000014   EE           MOV     A,R6
   \   000015   2422         ADD     A,#0x22
   \   000017   F582         MOV     DPL,A
   \   000019   EF           MOV     A,R7
   \   00001A   3400         ADDC    A,#0x0
   \   00001C   F583         MOV     DPH,A
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FA           MOV     R2,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FB           MOV     R3,A
   \   000023   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000026   85..82       MOV     DPL,?V0 + 0
   \   000029   85..83       MOV     DPH,?V0 + 1
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7900         MOV     R1,#0x0
   \   000002   12....       LCALL   ??HalUARTWrite?relay
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005   7C01         MOV     R4,#0x1
   \   000007   7D00         MOV     R5,#0x0
   \   000009   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   00000B   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   12....       LCALL   ??HalUARTWrite?relay
   \   000012   22           RET
    605          
    606          /*********************************************************************
    607           * @fn      SampleApp_SendPeriodicMessage
    608           *
    609           * @brief   Send the periodic message.
    610           *
    611           * @param   none
    612           *
    613           * @return  none
    614           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine10_0
   \   000003                ; // Fall through to label ??Subroutine10_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    615          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    616          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    617            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    618                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    619                                 1,
    620                                 (uint8*)&SampleAppPeriodicCounter,
    621                                 &SampleApp_TransID,
    622                                 AF_DISCV_ROUTE,
    623                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0 + 0,#0x1e
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV     ?V0 + 0,#SampleAppPeriodicCounter & 0xff
   \   00001B   75....       MOV     ?V0 + 1,#(SampleAppPeriodicCounter >> 8) & 0xff
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7920         MOV     R1,#0x20
   \   000035   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000037   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000039   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00003B   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00003D   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000040   02....       LJMP    ?Subroutine1 & 0xFFFF
    624            {
    625            }
    626            else
    627            {
    628              // Error occurred in request to send.
    629            }
    630          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine12_0:
   \   000000   12....       LCALL   ??AF_DataRequest?relay
   \   000003   7409         MOV     A,#0x9
   \   000005   22           RET
    631          
    632          /*********************************************************************
    633           * @fn      SampleApp_SendFlashMessage
    634           *
    635           * @brief   Send the flash message to group 1.
    636           *
    637           * @param   flashTime - in milliseconds
    638           *
    639           * @return  none
    640           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    641          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    642          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    643            uint8 buffer[3];
    644            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    645            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    646            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    647          
    648            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    649                                 SAMPLEAPP_FLASH_CLUSTERID,
    650                                 3,
    651                                 buffer,
    652                                 &SampleApp_TransID,
    653                                 AF_DISCV_ROUTE,
    654                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00006C   12....       LCALL   ?DEALLOC_XSTACK8
    655            {
    656            }
    657            else
    658            {
    659              // Error occurred in request to send.
    660            }
    661          }
   \   00006F   7403         MOV     A,#0x3
   \   000071   02....       LJMP    ?Subroutine1 & 0xFFFF
    662          
    663          /*********************************************************************
    664           * @fn      SampleApp_Send_P2P_Message
    665           *
    666           * @brief   point to point.
    667           *
    668           * @param   none
    669           *
    670           * @return  none
    671           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7920         MOV     R1,#0x20
   \   000002   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000004   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000006   7A..         MOV     R2,#SampleApp_P2P_DstAddr & 0xff
   \   000008   7B..         MOV     R3,#(SampleApp_P2P_DstAddr >> 8) & 0xff
   \   00000A                REQUIRE ??Subroutine12_0
   \   00000A                ; // Fall through to label ??Subroutine12_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    672          void SampleApp_Send_P2P_Message( void )
   \                     SampleApp_Send_P2P_Message:
    673          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    674            byte i, temp[3], humidity[3], strTemp[7];
    675            //byte state;
    676          
    677            DHT11();             //»ñÈ¡ÎÂÊª¶È
   \   00000A                ; Setup parameters for call to function DHT11
   \   00000A   12....       LCALL   ??DHT11?relay
    678          
    679            //½«ÎÂÊª¶ÈµÄ×ª»»³É×Ö·û´®,¹©LCDÏÔÊ¾  
    680            temp[0] = wendu_shi+0x30;
   \   00000D   90....       MOV     DPTR,#wendu_shi
   \   000010   E0           MOVX    A,@DPTR
   \   000011   2430         ADD     A,#0x30
   \   000013   C0E0         PUSH    A
   \   000015   7403         MOV     A,#0x3
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   D0E0         POP     A
   \   00001C   F0           MOVX    @DPTR,A
    681            temp[1] = wendu_ge+0x30;
   \   00001D   90....       MOV     DPTR,#wendu_ge
   \   000020   E0           MOVX    A,@DPTR
   \   000021   2430         ADD     A,#0x30
   \   000023   C0E0         PUSH    A
   \   000025   7404         MOV     A,#0x4
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   D0E0         POP     A
   \   00002C   F0           MOVX    @DPTR,A
    682            temp[2] = '\0';
   \   00002D   7405         MOV     A,#0x5
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   E4           CLR     A
   \   000033   F0           MOVX    @DPTR,A
    683            humidity[0] = shidu_shi+0x30;
   \   000034   90....       MOV     DPTR,#shidu_shi
   \   000037   E0           MOVX    A,@DPTR
   \   000038   2430         ADD     A,#0x30
   \   00003A   85..82       MOV     DPL,?XSP + 0
   \   00003D   85..83       MOV     DPH,?XSP + 1
   \   000040   F0           MOVX    @DPTR,A
    684            humidity[1] = shidu_ge+0x30;
   \   000041   90....       MOV     DPTR,#shidu_ge
   \   000044   E0           MOVX    A,@DPTR
   \   000045   2430         ADD     A,#0x30
   \   000047   C0E0         PUSH    A
   \   000049   7401         MOV     A,#0x1
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   D0E0         POP     A
   \   000050   F0           MOVX    @DPTR,A
    685            humidity[2] = '\0';
   \   000051   7402         MOV     A,#0x2
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   E4           CLR     A
   \   000057   F0           MOVX    @DPTR,A
    686            //½«Êý¾ÝÕûºÏºó·½±ã·¢¸øÐ­µ÷Æ÷ÏÔÊ¾
    687            osal_memcpy(strTemp, temp, 2); 
   \   000058                ; Setup parameters for call to function osal_memcpy
   \   000058   7403         MOV     A,#0x3
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   A982         MOV     R1,DPL
   \   00005F   AA83         MOV     R2,DPH
   \   000061   89..         MOV     ?V0 + 0,R1
   \   000063   8A..         MOV     ?V0 + 1,R2
   \   000065   75..00       MOV     ?V0 + 2,#0x0
   \   000068   78..         MOV     R0,#?V0 + 0
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00006D   7C02         MOV     R4,#0x2
   \   00006F   7D00         MOV     R5,#0x0
   \   000071   7409         MOV     A,#0x9
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000079   12....       LCALL   ?DEALLOC_XSTACK8
    688            osal_memcpy(&strTemp[2], "  ", 2);
   \   00007C                ; Setup parameters for call to function osal_memcpy
   \   00007C   75....       MOV     ?V0 + 0,#`?<Constant "  ">` & 0xff
   \   00007F   75....       MOV     ?V0 + 1,#(`?<Constant "  ">` >> 8) & 0xff
   \   000082   78..         MOV     R0,#?V0 + 0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000087   7C02         MOV     R4,#0x2
   \   000089   7D00         MOV     R5,#0x0
   \   00008B   740B         MOV     A,#0xb
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000093   12....       LCALL   ?DEALLOC_XSTACK8
    689            osal_memcpy(&strTemp[4], humidity, 3);
   \   000096                ; Setup parameters for call to function osal_memcpy
   \   000096   85..82       MOV     DPL,?XSP + 0
   \   000099   85..83       MOV     DPH,?XSP + 1
   \   00009C   A982         MOV     R1,DPL
   \   00009E   AA83         MOV     R2,DPH
   \   0000A0   89..         MOV     ?V0 + 0,R1
   \   0000A2   8A..         MOV     ?V0 + 1,R2
   \   0000A4   78..         MOV     R0,#?V0 + 0
   \   0000A6   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A9   7C03         MOV     R4,#0x3
   \   0000AB   7D00         MOV     R5,#0x0
   \   0000AD   740D         MOV     A,#0xd
   \   0000AF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B2   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0000B5   12....       LCALL   ?DEALLOC_XSTACK8
    690            
    691            //»ñµÃµÄÎÂÊª¶ÈÍ¨¹ý´®¿ÚÊä³öµ½µçÄÔÏÔÊ¾
    692            HalUARTWrite(0, "T&H:", 4);
   \   0000B8                ; Setup parameters for call to function HalUARTWrite
   \   0000B8   7C04         MOV     R4,#0x4
   \   0000BA   7D00         MOV     R5,#0x0
   \   0000BC   7A..         MOV     R2,#`?<Constant "T&H:">` & 0xff
   \   0000BE   7B..         MOV     R3,#(`?<Constant "T&H:">` >> 8) & 0xff
   \   0000C0   7900         MOV     R1,#0x0
   \   0000C2   12....       LCALL   ??HalUARTWrite?relay
    693            HalUARTWrite(0, strTemp, 6);
   \   0000C5                ; Setup parameters for call to function HalUARTWrite
   \   0000C5   7C06         MOV     R4,#0x6
   \   0000C7   7D00         MOV     R5,#0x0
   \   0000C9   EC           MOV     A,R4
   \   0000CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CD   AA82         MOV     R2,DPL
   \   0000CF   AB83         MOV     R3,DPH
   \   0000D1   12....       LCALL   ?Subroutine5 & 0xFFFF
    694            HalUARTWrite(0, "\n",1);
    695          
    696            //Êä³öµ½LCDÏÔÊ¾
    697            for(i=0; i<3; i++)
    698            {   
    699              if(i==0)
    700              {
    701                LCD_P16x16Ch(i*16,4,i*16);
   \                     ??CrossCallReturnLabel_6:
   \   0000D4                ; Setup parameters for call to function LCD_P16x16Ch
   \   0000D4   7B00         MOV     R3,#0x0
   \   0000D6   7A04         MOV     R2,#0x4
   \   0000D8   7900         MOV     R1,#0x0
   \   0000DA   12....       LCALL   ??LCD_P16x16Ch?relay
    702                LCD_P16x16Ch(i*16,6,(i+3)*16);
   \   0000DD                ; Setup parameters for call to function LCD_P16x16Ch
   \   0000DD   7B30         MOV     R3,#0x30
   \   0000DF   7A06         MOV     R2,#0x6
   \   0000E1   7900         MOV     R1,#0x0
   \   0000E3   12....       LCALL   ??LCD_P16x16Ch?relay
    703              }
   \   0000E6   7F01         MOV     R7,#0x1
    704              else
    705              {
    706                LCD_P16x16Ch(i*16,4,i*16);
   \                     ??SampleApp_Send_P2P_Message_0:
   \   0000E8   EF           MOV     A,R7
   \   0000E9   C4           SWAP    A
   \   0000EA   54F0         ANL     A,#0xf0
   \   0000EC   FE           MOV     R6,A
   \   0000ED                ; Setup parameters for call to function LCD_P16x16Ch
   \   0000ED   FB           MOV     R3,A
   \   0000EE   7A04         MOV     R2,#0x4
   \   0000F0   F9           MOV     R1,A
   \   0000F1   12....       LCALL   ??LCD_P16x16Ch?relay
    707                LCD_P16x16Ch(i*16,6,i*16);        
   \   0000F4                ; Setup parameters for call to function LCD_P16x16Ch
   \   0000F4   EE           MOV     A,R6
   \   0000F5   FB           MOV     R3,A
   \   0000F6   7A06         MOV     R2,#0x6
   \   0000F8   F9           MOV     R1,A
   \   0000F9   12....       LCALL   ??LCD_P16x16Ch?relay
    708              }
    709            } 
   \   0000FC   0F           INC     R7
   \   0000FD   EF           MOV     A,R7
   \   0000FE   C3           CLR     C
   \   0000FF   9403         SUBB    A,#0x3
   \   000101   40E5         JC      ??SampleApp_Send_P2P_Message_0
    710            LCD_P8x16Str(44, 4, temp);
   \   000103                ; Setup parameters for call to function LCD_P8x16Str
   \   000103   7403         MOV     A,#0x3
   \   000105   12....       LCALL   ?XSTACK_DISP0_8
   \   000108   AC82         MOV     R4,DPL
   \   00010A   AD83         MOV     R5,DPH
   \   00010C   7A04         MOV     R2,#0x4
   \   00010E   792C         MOV     R1,#0x2c
   \   000110   12....       LCALL   ??LCD_P8x16Str?relay
    711            LCD_P8x16Str(44, 6, humidity);
   \   000113                ; Setup parameters for call to function LCD_P8x16Str
   \   000113   85..82       MOV     DPL,?XSP + 0
   \   000116   85..83       MOV     DPH,?XSP + 1
   \   000119   AC82         MOV     R4,DPL
   \   00011B   AD83         MOV     R5,DPH
   \   00011D   7A06         MOV     R2,#0x6
   \   00011F   792C         MOV     R1,#0x2c
   \   000121   12....       LCALL   ??LCD_P8x16Str?relay
    712           
    713            if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc,
    714                                 SAMPLEAPP_P2P_CLUSTERID,
    715                                 6,
    716                                 strTemp,
    717                                 &SampleApp_TransID,
    718                                 AF_DISCV_ROUTE,
    719                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000124                ; Setup parameters for call to function AF_DataRequest
   \   000124   75..1E       MOV     ?V0 + 0,#0x1e
   \   000127   78..         MOV     R0,#?V0 + 0
   \   000129   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00012C   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00012F   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000132   78..         MOV     R0,#?V0 + 0
   \   000134   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000137   7409         MOV     A,#0x9
   \   000139   12....       LCALL   ?XSTACK_DISP0_8
   \   00013C   8582..       MOV     ?V0 + 0,DPL
   \   00013F   8583..       MOV     ?V0 + 1,DPH
   \   000142   78..         MOV     R0,#?V0 + 0
   \   000144   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000147   75..06       MOV     ?V0 + 0,#0x6
   \   00014A   75..00       MOV     ?V0 + 1,#0x0
   \   00014D   78..         MOV     R0,#?V0 + 0
   \   00014F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000152   75..03       MOV     ?V0 + 0,#0x3
   \   000155   78..         MOV     R0,#?V0 + 0
   \   000157   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00015A   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00015D   12....       LCALL   ?DEALLOC_XSTACK8
    720            {
    721            }
    722            else
    723            {
    724              // Error occurred in request to send.
    725            }
    726            
    727            
    728            
    729           
    730            GasData = ReadGasData(); //¶ÁÈ¡ÑÌÎí´«¸ÐÆ÷Òý½ÅÉÏµÄ ad ×ª»»Öµ£¬²¢Ã»ÓÐ»»Ëã³ÉÄÜ±íÊ¾ÑÌÎíÅ¨¶ÈµÄÖµ¡£ÑÝÊ¾ÈçºÎÊ¹ÓÃ 2530 Ð¾Æ¬µÄ AD ¹¦ÄÜ£¬¸ü¾ßÌåÔÚ×éÍøÖÐ¸ø³ö
   \   000160                ; Setup parameters for call to function ReadGasData
   \   000160   12....       LCALL   ??ReadGasData?relay
   \   000163   90....       MOV     DPTR,#GasData
   \   000166   EA           MOV     A,R2
   \   000167   F0           MOVX    @DPTR,A
   \   000168   A3           INC     DPTR
   \   000169   EB           MOV     A,R3
   \   00016A   12....       LCALL   ?Subroutine8 & 0xFFFF
    731            //¶ÁÈ¡µ½µÄÊýÖµ×ª»»³É×Ö·û´®£¬¹©´®¿Úº¯ÊýÊä³ö
    732            TxBuf[0] = GasData / 100 + '0';
   \                     ??CrossCallReturnLabel_7:
   \   00016D   7A64         MOV     R2,#0x64
   \   00016F   7B00         MOV     R3,#0x0
   \   000171   12....       LCALL   ?US_DIV_MOD
   \   000174   E8           MOV     A,R0
   \   000175   2430         ADD     A,#0x30
   \   000177   90....       MOV     DPTR,#TxBuf
   \   00017A   12....       LCALL   ?Subroutine3 & 0xFFFF
    733            TxBuf[1] = GasData / 10%10 + '0';
   \                     ??CrossCallReturnLabel_2:
   \   00017D   12....       LCALL   ?US_DIV_MOD
   \   000180   7A0A         MOV     R2,#0xa
   \   000182   7B00         MOV     R3,#0x0
   \   000184   12....       LCALL   ?US_DIV_MOD
   \   000187   EA           MOV     A,R2
   \   000188   2430         ADD     A,#0x30
   \   00018A   90....       MOV     DPTR,#TxBuf + 1
   \   00018D   12....       LCALL   ?Subroutine3 & 0xFFFF
    734            TxBuf[2] = GasData % 10 + '0';
   \                     ??CrossCallReturnLabel_3:
   \   000190   12....       LCALL   ?US_DIV_MOD
   \   000193   EA           MOV     A,R2
   \   000194   2430         ADD     A,#0x30
   \   000196   90....       MOV     DPTR,#TxBuf + 2
   \   000199   F0           MOVX    @DPTR,A
    735            TxBuf[3] = '\n';
   \   00019A   A3           INC     DPTR
   \   00019B   740A         MOV     A,#0xa
   \   00019D   F0           MOVX    @DPTR,A
    736            TxBuf[4] = 0;
   \   00019E   A3           INC     DPTR
   \   00019F   E4           CLR     A
   \   0001A0   F0           MOVX    @DPTR,A
    737            //UartSendString(TxBuf, 4); //Í¨¹ý´®¿Ú·¢³öÊý¾Ý£¬²¨ÌØÂÊÊÇ 115200 8N1
    738            //DelayMS(1000); //ÑÓÊ±º¯Êý
    739              
    740            
    741            
    742            HalUARTWrite(0,TxBuf, 5);//´®¿ÚÏÔÊ¾
                                  ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0001A1                ; Setup parameters for call to function HalUARTWrite
   \   0001A1   7C05         MOV     R4,#0x5
   \   0001A3   FD           MOV     R5,A
   \   0001A4   7A..         MOV     R2,#TxBuf & 0xff
   \   0001A6   7B..         MOV     R3,#(TxBuf >> 8) & 0xff
   \   0001A8   F9           MOV     R1,A
   \   0001A9   12....       LCALL   ??HalUARTWrite?relay
    743            
    744            if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc,
    745                                 SAMPLEAPP_P2P_CLUSTERID,
    746                                 5,
    747                                 TxBuf,
                                        ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
    748                                 &SampleApp_TransID,
    749                                 AF_DISCV_ROUTE,
    750                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   0001AC                ; Setup parameters for call to function AF_DataRequest
   \   0001AC   75..1E       MOV     ?V0 + 0,#0x1e
   \   0001AF   78..         MOV     R0,#?V0 + 0
   \   0001B1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001B4   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   0001B7   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   0001BA   78..         MOV     R0,#?V0 + 0
   \   0001BC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001BF   75....       MOV     ?V0 + 0,#TxBuf & 0xff
   \   0001C2   75....       MOV     ?V0 + 1,#(TxBuf >> 8) & 0xff
   \   0001C5   78..         MOV     R0,#?V0 + 0
   \   0001C7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001CA   75..05       MOV     ?V0 + 0,#0x5
   \   0001CD   75..00       MOV     ?V0 + 1,#0x0
   \   0001D0   78..         MOV     R0,#?V0 + 0
   \   0001D2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D5   75..03       MOV     ?V0 + 0,#0x3
   \   0001D8   78..         MOV     R0,#?V0 + 0
   \   0001DA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001DD   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0001E0   12....       LCALL   ?DEALLOC_XSTACK8
    751            {
    752            }
    753            else
    754            {
    755              // Error occurred in request to send.
    756            }   
    757            
    758            
    759            
    760            
    761            /*
    762            if(DATA_PIN == 1)
    763            { 
    764              state = 0x31;       //¸ßµçÆ½Ê±ËµÃ÷Ã»ÓÐ¼ì²âµ½ÆøÌå¡£
    765              HalUARTWrite(0,"GAS:security\n", 13);                 //´®¿ÚÏÔÊ¾
    766              HalLcdWriteString( "GAS:security\n", HAL_LCD_LINE_3 ); //LCDÏÔÊ¾ 
    767            }  
    768            else 
    769            {  
    770              MicroWait (10000);   // Wait 10ms
    771              if(DATA_PIN == 0)
    772              {     
    773                state = 0x30;      //µ±Êä³öµÍµçÆ½Ê±ÐÅºÅµÆÁÁ,¼ì²âµ½ÆøÌå
    774                HalUARTWrite(0,"GAS:Got bad Air\n",16);                 //´®¿ÚÏÔÊ¾
    775                HalLcdWriteString( "GAS:Got bad Air", HAL_LCD_LINE_3 ); //LCDÏÔÊ¾ 
    776              }
    777            }
    778          
    779            if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc,
    780                                 SAMPLEAPP_P2P_CLUSTERID,
    781                                 1,
    782                                 &state,
    783                                 &SampleApp_TransID,
    784                                 AF_DISCV_ROUTE,
    785                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    786            {
    787            }
    788            else
    789            {
    790              // Error occurred in request to send.
    791            }   
    792             */
    793          }
   \   0001E3   740D         MOV     A,#0xd
   \   0001E5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001E8   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004                REQUIRE ??Subroutine13_0
   \   000004                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000003   7A0A         MOV     R2,#0xa
   \   000005   7B00         MOV     R3,#0x0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#GasData
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??InitUart?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    InitUart

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??UartSendString?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UartSendString

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadGasData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadGasData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_P2P_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_P2P_Message

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "T&H:">`:
   \   000000   5426483A     DB "T&H:"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Abnormal temperature">`:
   \   000000   41626E6F     DB "Abnormal temperature"
   \            726D616C
   \            2074656D
   \            70657261
   \            74757265
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "MQ2:">`:
   \   000000   4D51323A     DB "MQ2:"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Gas anomaly">`:
   \   000000   47617320     DB "Gas anomaly"
   \            616E6F6D
   \            616C7900

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "  ">`:
   \   000000   202000       DB "  "
    794          /*********************************************************************
    795          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     InitUart                           0      0     11
     ReadGasData                        0      0     24
     SampleApp_HandleKeys               0      0     22
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> InitUart                      0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             0      0     22
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalLedBlink                   0      0     20
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_Send_P2P_Message
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     32
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      0      0     19
       -> AF_DataRequest                0      0     38
     SampleApp_Send_P2P_Message         1      0     45
       -> DHT11                         0      0     48
       -> osal_memcpy                   0      0     54
       -> osal_memcpy                   0      0     54
       -> osal_memcpy                   0      0     54
       -> HalUARTWrite                  0      0     48
       -> HalUARTWrite                  0      0     48
       -> HalUARTWrite                  0      0     48
       -> LCD_P16x16Ch                  0      0     48
       -> LCD_P16x16Ch                  0      0     48
       -> LCD_P16x16Ch                  0      0     48
       -> LCD_P16x16Ch                  0      0     48
       -> LCD_P8x16Str                  0      0     48
       -> LCD_P8x16Str                  0      0     48
       -> AF_DataRequest                0      0     66
       -> ReadGasData                   0      0     48
       -> HalUARTWrite                  0      0     48
       -> AF_DataRequest                0      0     66
     UartSendString                     0      0      9


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     U0CSR                                    1
     _A_P1                                    1
     CLKCONSTA                                1
     ADCCON1                                  1
     ADCCON3                                  1
     ADCL                                     1
     ADCH                                     1
     U0DBUF                                   1
     U0BAUD                                   1
     U0GCR                                    1
     CLKCONCMD                                1
     _A_IRCON2                                1
     PERCFG                                   1
     ADCCFG                                   1
     P0SEL                                    1
     P1SEL                                    1
     P0DIR                                    1
     P1DIR                                    1
     P2DIR                                    1
     TxBuf                                    5
     GasData                                  2
     SampleApp_ClusterList                    6
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_P2P_DstAddr                   12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     InitUart                                23
     UartSendString                          49
     ReadGasData                             25
     SampleApp_Init                         218
     ?Subroutine0                             5
     ??Subroutine13_0                         6
     SampleApp_ProcessEvent                 176
     SampleApp_HandleKeys                    61
     ??Subroutine10_0                         5
     SampleApp_MessageMSGCB                 289
     ?Subroutine4                             3
     ??Subroutine11_0                         9
     ?Subroutine2                            46
     ?Subroutine5                             4
     ?Subroutine9                            19
     ?Subroutine1                             3
     SampleApp_SendPeriodicMessage           67
     ??Subroutine12_0                         6
     SampleApp_SendFlashMessage             116
     ?Subroutine7                            10
     SampleApp_Send_P2P_Message             491
     ?Subroutine6                             4
     ?Subroutine3                             8
     ?Subroutine8                            10
     ??InitUart?relay                         6
     ??UartSendString?relay                   6
     ??ReadGasData?relay                      6
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ??SampleApp_Send_P2P_Message?relay       6
     ?<Constant "Group 1">                    8
     ?<Constant "SampleApp">                 10
     ?<Constant "T&H:">                       5
     ?<Constant "\n">                         2
     ?<Constant "Abnormal temperature">      21
     ?<Constant "MQ2:">                       5
     ?<Constant "Gas anomaly">               12
     ?<Constant "  ">                         3

 
 1 653 bytes in segment BANKED_CODE
    60 bytes in segment BANK_RELAYS
    19 bytes in segment SFR_AN
    84 bytes in segment XDATA_ROM_C
    72 bytes in segment XDATA_Z
 
 1 713 bytes of CODE  memory
    84 bytes of CONST memory
     0 bytes of DATA  memory (+ 19 bytes shared)
    72 bytes of XDATA memory

Errors: none
Warnings: 4
